// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Msi.Extensions.Persistence.EntityFrameworkCore.MySql;

namespace AccountingWebHost.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Infrastructure.Entities.OrganizationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OrganizationEntity");
                });

            modelBuilder.Entity("Module.Accounting.Entities.ChartOfAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("ChartOfAccount");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Description = "Cash you haven’t deposited in the bank. Add your bank and credit card accounts to accurately categorize transactions that aren't cash.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Cash on Hand",
                            TypeId = 1L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Accounts Receivable",
                            TypeId = 3L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Accounts Payable",
                            TypeId = 12L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Tax",
                            TypeId = 13L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Description = "Payments from your customers for products and services that your business sold.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Sales",
                            TypeId = 18L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Description = "Income you haven't categorized yet. Categorize it now to keep your records accurate.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Uncategorized Income",
                            TypeId = 21L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Foreign exchange gains happen when the exchange rate between your business's home currency and a foreign currency transaction changes and results in a gain. This can happen in the time between a transaction being entered in Wave and being settled, for example, between when you send an invoice and when your customer pays it. This can affect foreign currency invoice payments, bill payments, or foreign currency held in your bank account.",
                            TypeId = 22L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Accounting or bookkeeping services for your business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Accounting Fees",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Advertising or other costs to promote your business. Includes web or social media promotion.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Advertising & Promotion",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Fees you pay to your bank like transaction charges, monthly charges, and overdraft charges.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Bank Service Charges",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Desktop or laptop computers, mobile phones, tablets, and accessories used for your business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Computer – Hardware",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Fees for web storage and access, like hosting your business website or app.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Computer – Hosting",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 13L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Internet services for your business. Does not include data access for mobile devices.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Computer – Internet",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 14L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Apps, software, and web or cloud services you use for business on your mobile phone or computer. Includes one-time purchases and subscriptions.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Computer – Software",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 15L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Depreciation Expense",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 16L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Food and beverages you consume while conducting business, with clients and vendors, or entertaining customers.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Meals and Entertainment",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 17L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Office supplies and services for your business office or space.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Office Supplies",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 18L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Fees you pay to consultants or trained professionals for advice or services related to your business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Professional Fees",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 19L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Costs to rent or lease property or furniture for your business office space. Does not include equipment rentals.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Rent Expense",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 20L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Repair and upkeep of property or equipment, as long as the repair doesn't add value to the property. Does not include replacements or upgrades.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Repairs & Maintenance",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 21L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Land line phone services for your business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Telephone – Land Line",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 22L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Mobile phone services for your business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Telephone – Wireless",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 23L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Transportation and travel costs while traveling for business. Does not include daily commute costs.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Travel Expense",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 24L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Utilities (electricity, water, etc.) for your business office. Does not include phone use.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Utilities",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 25L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Gas and fuel costs when driving for business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Vehicle – Fuel",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 26L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Repairs and preventative maitenance of the vehicle you drive for business.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Vehicle – Repairs & Maintenance",
                            TypeId = 23L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 27L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Federal and provincial/state deductions taken from an employee's pay, like employment insurance. These are usually described as line deductions on the pay stub.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Payroll – Employee Benefits",
                            TypeId = 26L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 28L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "The portion of federal and provincial/state obligations your business is responsible for paying as an employer.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Payroll – Employer's Share of Benefits",
                            TypeId = 26L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 29L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Wages and salaries paid to your employees.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Payroll – Salary & Wages",
                            TypeId = 26L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 30L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "A business cost you haven't categorized yet. Categorize it now to keep your records accurate.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Uncategorized Expense",
                            TypeId = 27L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 31L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Description = "Foreign exchange losses happen when the exchange rate between your business's home currency and a foreign currency transaction changes and results in a loss. This can happen in the time between a transaction being entered in Wave and being settled, for example, between when you send an invoice and when your customer pays it. This can affect foreign currency invoice payments, bill payments, or foreign currency held in your bank account.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Loss on Foreign Exchange",
                            TypeId = 28L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 32L,
                            CategoryId = 5L,
                            CreatedBy = 0L,
                            Description = "Owner investment represents the amount of money or assets you put into your business, either to start the business or keep it running. An owner's draw is a direct withdrawal from business cash or assets for your personal use.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Owner Investment / Drawings",
                            TypeId = 29L,
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 33L,
                            CategoryId = 5L,
                            CreatedBy = 0L,
                            Description = "Owner's equity is what remains after you subtract business liabilities from business assets. In other words, it's what's left over for you if you sell all your assets and pay all your debts.",
                            IsDeletable = false,
                            IsEditable = false,
                            Name = "Owner's Equity",
                            TypeId = 30L,
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Accounting.Entities.ChartOfAccountCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ChartOfAccountCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            Name = "Assets",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 0L,
                            Name = "Liabilities & Credit Cards",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = 0L,
                            Name = "Income",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = 0L,
                            Name = "Expenses",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = 0L,
                            Name = "Equity",
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Accounting.Entities.ChartOfAccountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UseOf")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ChartOfAccountType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Cash and Bank",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of cash that is immediately available for use. Examples of this are bank accounts, cash boxes in a register, money boxes, or electronic accounts such as PayPal."
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Money in Transit",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of money that is expected to deposited or withdrawn into or from a Cash and Bank account at a future date, usually within days. Examples of this are credit card sales that have been processed but have not yet been deposited into your bank, or checks (written or received) that have not been deposited into or withdrawn from your bank account yet."
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Expected Payments from Customers",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of what customers owe you after you have made a sale. Invoices in Wave are already tracked in the Accounts Receivable category."
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Inventory",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the value of physical items you have in storage or in a retail store that are waiting to be sold/completed."
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Property, Plant, Equipment",
                            UpdatedBy = 0L,
                            UseOf = "Things you own but you do not sell to customers as part of your normal business operations."
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Depreciation and Amortization",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the decrease in value of things you own. For example, when you purchase equipment for business, it loses its value as time goes on. These categories always have a balance less than zero (negative)."
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Vendor Prepayments and Vendor Credits",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the value of the product or service that a vendor still needs to provide to you because you have made upfront payments to them. Examples of this are when you make upfront payments for insurance in the beginning of the year or for multiple years, or when a vendor gives you a credit note. The balance of the category will decrease over time as the vendor needs to provide less and less product or service to you."
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Other Short-Term Asset",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track amounts that you are owed this year when none of the other asset account types apply. Other Long-Term Asset accounts are used to track amounts that you are owed after this year. These accounts will appear in the Other Current Assets section of the balance sheet."
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 1L,
                            CreatedBy = 0L,
                            Name = "Other Long-Term Asset",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track amounts that you are owed after this year when none of the other asset account types apply. Other Short-Term Asset accounts are used to track amounts that you are owed this year. These accounts will appear in the Long-term Assets section of the balance sheet."
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Credit Card",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track purchases made using a credit card. Create an account for each credit card you use in your business. Purchases using your credit card, and payments to your credit card, should be recorded in the relevant credit card category."
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Loan and Line of Credit",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of outstanding loans or withdrawals you've made using a line of credit. The cash you receive as a result of a loan or line of credit is deposited into a Cash and Bank category."
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Expected Payments to Vendors",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of what you owe vendors (i.e. suppliers, online subscriptions providers) after you accepted their service or receive items for which you have not yet paid. Bills in Wave are already tracked in the Accounts Payable category."
                        },
                        new
                        {
                            Id = 13L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Sales Taxes",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the sales taxes you have charged to customers during a sale, and sales tax amounts you have remitted to the government. The balance of this category indicates how much you have to remit to the government. This category can also be used to track sales taxes you been charged on purchases, so that you can reduce how much sales taxes you have to remit to the government. If you create a sales tax in Wave, a category here is created for you automatically."
                        },
                        new
                        {
                            Id = 14L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Due to You and Other Business Owners",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the balance of what you (or your partners) have personally loaned to the business, but expect to be paid back for. The same category can also be used to track loans the business has given you (or your partners), in which case the balance would be less than zero (negative)."
                        },
                        new
                        {
                            Id = 15L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Customer Prepayments and Customer Credits",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the value of the product or service that you still need to provide to a customer because they made upfront payments to you. An example is when a customer gives you a deposit or a retainer, or when you give a customer a credit note. The balance of the category will decrease over time as you provide the product or service to the customer."
                        },
                        new
                        {
                            Id = 16L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Other Short-Term Liability",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track amounts that you owe this year when none of the other liability account types apply. Other Long-Term Liability accounts are used to track amounts that you owe after this year. These accounts will appear in the Current Liabilities section of the balance sheet."
                        },
                        new
                        {
                            Id = 17L,
                            CategoryId = 2L,
                            CreatedBy = 0L,
                            Name = "Other Long-Term Liability",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track amounts that you owe after this year when none of the other liability account types apply. Other Short-Term Liability accounts are used to track amounts that you owe this year. These accounts will appear in the Long-term Liabilities section of the balance sheet."
                        },
                        new
                        {
                            Id = 18L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Name = "Income",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track all your sales to customers, whether your customer has made a payment or not. These are the categories used when you create an Invoice in Wave. Any sales taxes charged to customers will not be tracked using a Sales category, but will be tracked using a Sales Taxes on Sales or Purchases category."
                        },
                        new
                        {
                            Id = 19L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Name = "Discount",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track discounts you've given to customers so that you can determine if you are giving too many discounts. Discounts reduce your income, which is why it will be shown as a negative on the Profit and Loss report."
                        },
                        new
                        {
                            Id = 20L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Name = "Other Income",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track all other income that is outside of your regular business operations of selling to your customers. For example, if your main business is as a photographer, but you rented your camera to a friend as a one-off shoot, that could be other income."
                        },
                        new
                        {
                            Id = 21L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Name = "Uncategorized Income",
                            UpdatedBy = 0L,
                            UseOf = "This account is used as the default category for new deposit transactions."
                        },
                        new
                        {
                            Id = 22L,
                            CategoryId = 3L,
                            CreatedBy = 0L,
                            Name = "Gain On Foreign Exchange",
                            UpdatedBy = 0L,
                            UseOf = "This account is used to track gains due to exchange rate differences on foreign currency invoices, bills, and transfers."
                        },
                        new
                        {
                            Id = 23L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Operating Expense",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track most of your business expenses. Each type of office, insurance, rent, utilities, and subscription fees can have a category."
                        },
                        new
                        {
                            Id = 24L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Cost of Goods Sold",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track expenses that are directly attributable to the product or service you are selling. If there is a type of expense that cannot be attributable to sales, then you should create an Operating Expense category instead."
                        },
                        new
                        {
                            Id = 25L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Payment Processing Fee",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track the fees charged when your customer makes a credit card payment. Even though this is usually deducted from the transfer or deposit into your bank account, you should still be recording this type of expense."
                        },
                        new
                        {
                            Id = 26L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Payroll Expense",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track expenses related to running and approving a payroll for salaried and hourly employees. Do not use these categories to track payments to yourself, unless you are an employee of the business."
                        },
                        new
                        {
                            Id = 27L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Uncategorized Expense",
                            UpdatedBy = 0L,
                            UseOf = "This account is used as the default category for new withdrawal transactions."
                        },
                        new
                        {
                            Id = 28L,
                            CategoryId = 4L,
                            CreatedBy = 0L,
                            Name = "Loss On Foreign Exchange",
                            UpdatedBy = 0L,
                            UseOf = "This account is used to track losses due to exchange rate differences on foreign currency invoices, bills, and transfers."
                        },
                        new
                        {
                            Id = 29L,
                            CategoryId = 5L,
                            CreatedBy = 0L,
                            Name = "Business Owner Contribution and Drawing",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track money you or others have invested into the business. For example, when you first start a business you usually invest start-up money into it."
                        },
                        new
                        {
                            Id = 30L,
                            CategoryId = 5L,
                            CreatedBy = 0L,
                            Name = "Retained Earnings: Profit",
                            UpdatedBy = 0L,
                            UseOf = "Use this to track money that you have taken out of the business."
                        });
                });

            modelBuilder.Entity("Module.Accounting.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Module.Core.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AddressLine5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("StateOrProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Module.Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CallingCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Capital")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Code2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Code3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Flag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IDD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsBillingEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCityEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDistrictEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIndependent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShippingEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsZipCodeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LongName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NDD")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NativeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumericCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Module.Core.Entities.CountryCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CountryCurrency");
                });

            modelBuilder.Entity("Module.Core.Entities.CountryLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("Module.Core.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Plural")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Symbol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code3 = "AED",
                            CreatedBy = 0L,
                            Name = "UAE dirham",
                            Plural = "UAE dirhams",
                            Symbol = "AED",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Code3 = "AFN",
                            CreatedBy = 0L,
                            Name = "Afghani",
                            Plural = "Afganis",
                            Symbol = "؋",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Code3 = "ALL",
                            CreatedBy = 0L,
                            Name = "Lek",
                            Plural = "Lekë",
                            Symbol = "Lek",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Code3 = "AMD",
                            CreatedBy = 0L,
                            Name = "Armenian dram",
                            Plural = "Armenian drams",
                            Symbol = "֏",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Code3 = "ANG",
                            CreatedBy = 0L,
                            Name = "Netherlands Antillean guilder",
                            Plural = "Netherlands Antillean guilders",
                            Symbol = "ƒ",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Code3 = "AOA",
                            CreatedBy = 0L,
                            Name = "Kwanza",
                            Plural = "Kwanzas",
                            Symbol = "Kz",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Code3 = "ARS",
                            CreatedBy = 0L,
                            Name = "Argentinian peso",
                            Plural = "Argentinian pesos",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Code3 = "AUD",
                            CreatedBy = 0L,
                            Name = "Australian dollar",
                            Plural = "Australian dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Code3 = "AWG",
                            CreatedBy = 0L,
                            Name = "Aruban florin",
                            Plural = "Aruban florin",
                            Symbol = "ƒ",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 10L,
                            Code3 = "AZN",
                            CreatedBy = 0L,
                            Name = "New Manat",
                            Plural = "New Manat",
                            Symbol = "ман",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 11L,
                            Code3 = "BAM",
                            CreatedBy = 0L,
                            Name = "Convertible Marks",
                            Plural = "Convertible Marks",
                            Symbol = "KM",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 12L,
                            Code3 = "BBD",
                            CreatedBy = 0L,
                            Name = "Barbados dollar",
                            Plural = "Barbados dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 13L,
                            Code3 = "BDT",
                            CreatedBy = 0L,
                            Name = "Taka",
                            Plural = "Takas",
                            Symbol = "৳",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 14L,
                            Code3 = "BGN",
                            CreatedBy = 0L,
                            Name = "Lev",
                            Plural = "Leva",
                            Symbol = "лв",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 15L,
                            Code3 = "BHD",
                            CreatedBy = 0L,
                            Name = "Bahraini dinar",
                            Plural = "Bahraini dinars",
                            Symbol = "BD",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 16L,
                            Code3 = "BIF",
                            CreatedBy = 0L,
                            Name = "Burundi franc",
                            Plural = "Burundi francs",
                            Symbol = "FBu",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 17L,
                            Code3 = "BMD",
                            CreatedBy = 0L,
                            Name = "Bermuda dollar",
                            Plural = "Bermuda dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 18L,
                            Code3 = "BND",
                            CreatedBy = 0L,
                            Name = "Brunei dollar",
                            Plural = "Brunei dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 19L,
                            Code3 = "BOB",
                            CreatedBy = 0L,
                            Name = "Boliviano",
                            Plural = "Bolivianos",
                            Symbol = "$b",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 20L,
                            Code3 = "BRL",
                            CreatedBy = 0L,
                            Name = "Real",
                            Plural = "Reales",
                            Symbol = "R$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 21L,
                            Code3 = "BSD",
                            CreatedBy = 0L,
                            Name = "Bahamian dollar",
                            Plural = "Bahamian dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 22L,
                            Code3 = "BTN",
                            CreatedBy = 0L,
                            Name = "Ngultrum",
                            Plural = "Ngultrums",
                            Symbol = "Nu.",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 23L,
                            Code3 = "BWP",
                            CreatedBy = 0L,
                            Name = "Pula",
                            Plural = "Pula",
                            Symbol = "P",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 24L,
                            Code3 = "BYR",
                            CreatedBy = 0L,
                            Name = "Belarussian rouble",
                            Plural = "Belarussian roubles",
                            Symbol = "p.",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 25L,
                            Code3 = "BZD",
                            CreatedBy = 0L,
                            Name = "Belize dollar",
                            Plural = "Belize dollars",
                            Symbol = "BZ$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 26L,
                            Code3 = "CAD",
                            CreatedBy = 0L,
                            Name = "Canadian dollar",
                            Plural = "Canadian dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 27L,
                            Code3 = "CDF",
                            CreatedBy = 0L,
                            Name = "Franc congolais",
                            Plural = "Francs congolais",
                            Symbol = "₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 28L,
                            Code3 = "CHF",
                            CreatedBy = 0L,
                            Name = "Swiss franc",
                            Plural = "Swiss francs",
                            Symbol = "CHF",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 29L,
                            Code3 = "CLP",
                            CreatedBy = 0L,
                            Name = "Chilean peso",
                            Plural = "Chilean pesos",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 30L,
                            Code3 = "CNY",
                            CreatedBy = 0L,
                            Name = "Ren-Min-Bi yuan",
                            Plural = "Ren-Min-Bi yuan",
                            Symbol = "¥",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 31L,
                            Code3 = "COP",
                            CreatedBy = 0L,
                            Name = "Colombian peso",
                            Plural = "Colombian pesos",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 32L,
                            Code3 = "CRC",
                            CreatedBy = 0L,
                            Name = "Costa Rican colon",
                            Plural = "Costa Rican colones",
                            Symbol = "₡",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 33L,
                            Code3 = "CUP",
                            CreatedBy = 0L,
                            Name = "Cuban peso",
                            Plural = "Cuban pesos",
                            Symbol = "₱",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 34L,
                            Code3 = "CVE",
                            CreatedBy = 0L,
                            Name = "Cape Verde escudo",
                            Plural = "Cape Verde escudos",
                            Symbol = "Esc",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 35L,
                            Code3 = "CZK",
                            CreatedBy = 0L,
                            Name = "Czech koruna",
                            Plural = "Czech korun",
                            Symbol = "Kč",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 36L,
                            Code3 = "DJF",
                            CreatedBy = 0L,
                            Name = "Djibouti franc",
                            Plural = "Djibouti francs",
                            Symbol = "₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 37L,
                            Code3 = "DKK",
                            CreatedBy = 0L,
                            Name = "Danish krone",
                            Plural = "Danish kroner",
                            Symbol = "kr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 38L,
                            Code3 = "DOP",
                            CreatedBy = 0L,
                            Name = "Dominican peso",
                            Plural = "Dominican pesos",
                            Symbol = "RD$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 39L,
                            Code3 = "DZD",
                            CreatedBy = 0L,
                            Name = "Algerian dinar",
                            Plural = "Algerian dinars",
                            Symbol = "د.ج",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 40L,
                            Code3 = "EEK",
                            CreatedBy = 0L,
                            Name = "Estonian kroon",
                            Plural = "Estonian krooni",
                            Symbol = "kr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 41L,
                            Code3 = "EGP",
                            CreatedBy = 0L,
                            Name = "Egyptian pound",
                            Plural = "Egyptian pounds",
                            Symbol = "E £",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 42L,
                            Code3 = "ERN",
                            CreatedBy = 0L,
                            Name = "Nakfa",
                            Plural = "Nakfas",
                            Symbol = "Nfk",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 43L,
                            Code3 = "ETB",
                            CreatedBy = 0L,
                            Name = "Ethiopian birr",
                            Plural = "Ethiopian birrs",
                            Symbol = "Br",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 44L,
                            Code3 = "EUR",
                            CreatedBy = 0L,
                            Name = "Euro",
                            Plural = "Euros",
                            Symbol = "€",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 45L,
                            Code3 = "FJD",
                            CreatedBy = 0L,
                            Name = "Fiji dollar",
                            Plural = "Fiji dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 46L,
                            Code3 = "FKP",
                            CreatedBy = 0L,
                            Name = "Falkland Islands (Malvinas) pound",
                            Plural = "Falkland Islands (Malvinas) pounds",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 47L,
                            Code3 = "GBP",
                            CreatedBy = 0L,
                            Name = "Pound sterling",
                            Plural = "Pounds sterling",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 48L,
                            Code3 = "GEL",
                            CreatedBy = 0L,
                            Name = "Lari",
                            Plural = "Lari",
                            Symbol = "ლ",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 49L,
                            Code3 = "GHS",
                            CreatedBy = 0L,
                            Name = "Ghana cedi",
                            Plural = "Ghana cedis",
                            Symbol = "GH¢",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 50L,
                            Code3 = "GIP",
                            CreatedBy = 0L,
                            Name = "Gibraltar pound",
                            Plural = "Gibraltar pounds",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 51L,
                            Code3 = "GMD",
                            CreatedBy = 0L,
                            Name = "Dalasi",
                            Plural = "Dalasi",
                            Symbol = "D",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 52L,
                            Code3 = "GNF",
                            CreatedBy = 0L,
                            Name = "Guinean franc",
                            Plural = "Guinean francs",
                            Symbol = "₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 53L,
                            Code3 = "GTQ",
                            CreatedBy = 0L,
                            Name = "Quetzal",
                            Plural = "Quetzales",
                            Symbol = "Q",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 54L,
                            Code3 = "GWP",
                            CreatedBy = 0L,
                            Name = "Guinea-Bissau peso",
                            Plural = "Guinea-Bissau pesos",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 55L,
                            Code3 = "GYD",
                            CreatedBy = 0L,
                            Name = "Guyana dollar",
                            Plural = "Guyana dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 56L,
                            Code3 = "HKD",
                            CreatedBy = 0L,
                            Name = "Hong Kong dollar",
                            Plural = "Hong Kong dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 57L,
                            Code3 = "HNL",
                            CreatedBy = 0L,
                            Name = "Lempira",
                            Plural = "Lempiras",
                            Symbol = "L",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 58L,
                            Code3 = "HRK",
                            CreatedBy = 0L,
                            Name = "Kuna",
                            Plural = "Kunas",
                            Symbol = "kn",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 59L,
                            Code3 = "HTG",
                            CreatedBy = 0L,
                            Name = "Haitian gourde",
                            Plural = "Haitian gourdes",
                            Symbol = "G",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 60L,
                            Code3 = "HUF",
                            CreatedBy = 0L,
                            Name = "Forint",
                            Plural = "Forints",
                            Symbol = "Ft",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 61L,
                            Code3 = "IDR",
                            CreatedBy = 0L,
                            Name = "Rupiah",
                            Plural = "Rupiahs",
                            Symbol = "Rp",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 62L,
                            Code3 = "ILS",
                            CreatedBy = 0L,
                            Name = "New Israeli sheqel",
                            Plural = "New Israeli sheqels",
                            Symbol = "₪",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 63L,
                            Code3 = "INR",
                            CreatedBy = 0L,
                            Name = "Indian rupee",
                            Plural = "Indian rupees",
                            Symbol = "₹",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 64L,
                            Code3 = "IQD",
                            CreatedBy = 0L,
                            Name = "Iraqi dinar",
                            Plural = "Iraqi dinars",
                            Symbol = "د.ع",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 65L,
                            Code3 = "IRR",
                            CreatedBy = 0L,
                            Name = "Iranian rial",
                            Plural = "Iranian rials",
                            Symbol = "﷼",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 66L,
                            Code3 = "ISK",
                            CreatedBy = 0L,
                            Name = "Icelandic króna",
                            Plural = "Icelandic krónur",
                            Symbol = "kr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 67L,
                            Code3 = "JMD",
                            CreatedBy = 0L,
                            Name = "Jamaican dollar",
                            Plural = "Jamaican dollars",
                            Symbol = "J$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 68L,
                            Code3 = "JOD",
                            CreatedBy = 0L,
                            Name = "Jordanian dinar",
                            Plural = "Jordanian dinars",
                            Symbol = "د.ا",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 69L,
                            Code3 = "JPY",
                            CreatedBy = 0L,
                            Name = "Yen",
                            Plural = "Yen",
                            Symbol = "¥",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 70L,
                            Code3 = "KES",
                            CreatedBy = 0L,
                            Name = "Kenyan shilling",
                            Plural = "Kenyan shillings",
                            Symbol = "SH",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 71L,
                            Code3 = "KGS",
                            CreatedBy = 0L,
                            Name = "Kyrgyz Som",
                            Plural = "Kyrgyz Soms",
                            Symbol = "лв",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 72L,
                            Code3 = "KHR",
                            CreatedBy = 0L,
                            Name = "Riel",
                            Plural = "Riels",
                            Symbol = "៛",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 73L,
                            Code3 = "KMF",
                            CreatedBy = 0L,
                            Name = "Comoro franc",
                            Plural = "Comoro francs",
                            Symbol = "₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 74L,
                            Code3 = "KRW",
                            CreatedBy = 0L,
                            Name = "Won",
                            Plural = "Won",
                            Symbol = "₩",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 75L,
                            Code3 = "KWD",
                            CreatedBy = 0L,
                            Name = "Kuwaiti dinar",
                            Plural = "Kuwaiti dinars",
                            Symbol = "د.ك",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 76L,
                            Code3 = "KYD",
                            CreatedBy = 0L,
                            Name = "Cayman Islands dollar",
                            Plural = "Cayman Islands dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 77L,
                            Code3 = "KZT",
                            CreatedBy = 0L,
                            Name = "Tenge",
                            Plural = "Tenge",
                            Symbol = "лв",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 78L,
                            Code3 = "LAK",
                            CreatedBy = 0L,
                            Name = "Kip",
                            Plural = "Kips",
                            Symbol = "₭",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 79L,
                            Code3 = "LBP",
                            CreatedBy = 0L,
                            Name = "Lebanese pound",
                            Plural = "Lebanese pounds",
                            Symbol = "LBP",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 80L,
                            Code3 = "LKR",
                            CreatedBy = 0L,
                            Name = "Sri Lankan rupee",
                            Plural = "Sri Lankan rupees",
                            Symbol = "₨",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 81L,
                            Code3 = "LRD",
                            CreatedBy = 0L,
                            Name = "Liberian dollar",
                            Plural = "Liberian dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 82L,
                            Code3 = "LSL",
                            CreatedBy = 0L,
                            Name = "Loti",
                            Plural = "Maloti",
                            Symbol = "M",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 83L,
                            Code3 = "LTL",
                            CreatedBy = 0L,
                            Name = "Lithuanian litus",
                            Plural = "Lithuanian litai",
                            Symbol = "Lt",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 84L,
                            Code3 = "LVL",
                            CreatedBy = 0L,
                            Name = "Latvian lats",
                            Plural = "Latvian lats",
                            Symbol = "Ls",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 85L,
                            Code3 = "LYD",
                            CreatedBy = 0L,
                            Name = "Libyan dinar",
                            Plural = "Libyan dinar",
                            Symbol = "ل.د",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 86L,
                            Code3 = "MAD",
                            CreatedBy = 0L,
                            Name = "Moroccan dirham",
                            Plural = "Moroccan dirhams",
                            Symbol = "د.م",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 87L,
                            Code3 = "MDL",
                            CreatedBy = 0L,
                            Name = "Moldovan leu",
                            Plural = "Moldovan lei",
                            Symbol = "L",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 88L,
                            Code3 = "MGA",
                            CreatedBy = 0L,
                            Name = "Malagasy Ariary",
                            Plural = "Malagasy Ariaries",
                            Symbol = "Ar",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 89L,
                            Code3 = "MKD",
                            CreatedBy = 0L,
                            Name = "Denar",
                            Plural = "Denari",
                            Symbol = "ден",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 90L,
                            Code3 = "MMK",
                            CreatedBy = 0L,
                            Name = "Kyat",
                            Plural = "Kyats",
                            Symbol = "K",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 91L,
                            Code3 = "MNT",
                            CreatedBy = 0L,
                            Name = "Tugrik",
                            Plural = "Tugriks",
                            Symbol = "₮",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 92L,
                            Code3 = "MOP",
                            CreatedBy = 0L,
                            Name = "Pataca",
                            Plural = "Patacas",
                            Symbol = "MOP$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 93L,
                            Code3 = "MRO",
                            CreatedBy = 0L,
                            Name = "Ouguiya",
                            Plural = "Ouguiyas",
                            Symbol = "UM",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 94L,
                            Code3 = "MRU",
                            CreatedBy = 0L,
                            Name = "Ouguiya",
                            Plural = "Ouguiyas",
                            Symbol = "UM",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 95L,
                            Code3 = "MUR",
                            CreatedBy = 0L,
                            Name = "Mauritian rupee",
                            Plural = "Mauritian rupees",
                            Symbol = "₨",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 96L,
                            Code3 = "MVR",
                            CreatedBy = 0L,
                            Name = "Rufiyaa",
                            Plural = "Rufiyaas",
                            Symbol = "Rf",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 97L,
                            Code3 = "MWK",
                            CreatedBy = 0L,
                            Name = "Kwacha",
                            Plural = "Kwacha",
                            Symbol = "MK",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 98L,
                            Code3 = "MXN",
                            CreatedBy = 0L,
                            Name = "Mexican peso",
                            Plural = "Mexican pesos",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 99L,
                            Code3 = "MYR",
                            CreatedBy = 0L,
                            Name = "Malaysian ringgit",
                            Plural = "Malaysian ringgit",
                            Symbol = "RM",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 100L,
                            Code3 = "MZN",
                            CreatedBy = 0L,
                            Name = "Metical",
                            Plural = "Meticais",
                            Symbol = "MT",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 101L,
                            Code3 = "NAD",
                            CreatedBy = 0L,
                            Name = "Namibian dollar",
                            Plural = "Namibian dollar",
                            Symbol = "N$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 102L,
                            Code3 = "NGN",
                            CreatedBy = 0L,
                            Name = "Naira",
                            Plural = "Naira",
                            Symbol = "₦",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 103L,
                            Code3 = "NIO",
                            CreatedBy = 0L,
                            Name = "Cordoba Oro",
                            Plural = "Cordobas Oro",
                            Symbol = "C$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 104L,
                            Code3 = "NOK",
                            CreatedBy = 0L,
                            Name = "Norwegian krone",
                            Plural = "Norwegian kroner",
                            Symbol = "kr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 105L,
                            Code3 = "NPR",
                            CreatedBy = 0L,
                            Name = "Nepalese rupee",
                            Plural = "Nepalese rupees",
                            Symbol = "₨",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 106L,
                            Code3 = "NZD",
                            CreatedBy = 0L,
                            Name = "New Zealand dollar",
                            Plural = "New Zealand dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 107L,
                            Code3 = "OMR",
                            CreatedBy = 0L,
                            Name = "Omani rial",
                            Plural = "Omani rials",
                            Symbol = "﷼",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 108L,
                            Code3 = "PAB",
                            CreatedBy = 0L,
                            Name = "Balboa",
                            Plural = "Balboas",
                            Symbol = "B/.",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 109L,
                            Code3 = "PEN",
                            CreatedBy = 0L,
                            Name = "Nuevo Sol",
                            Plural = "Nuevo Soles",
                            Symbol = "S/.",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 110L,
                            Code3 = "PGK",
                            CreatedBy = 0L,
                            Name = "Kina",
                            Plural = "Kinas",
                            Symbol = "K",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 111L,
                            Code3 = "PHP",
                            CreatedBy = 0L,
                            Name = "Philippine peso",
                            Plural = "Philippine pesos",
                            Symbol = "Php",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 112L,
                            Code3 = "PKR",
                            CreatedBy = 0L,
                            Name = "Pakistani rupee",
                            Plural = "Pakistani rupees",
                            Symbol = "₨",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 113L,
                            Code3 = "PLN",
                            CreatedBy = 0L,
                            Name = "Zloty",
                            Plural = "Zloty",
                            Symbol = "zł",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 114L,
                            Code3 = "PYG",
                            CreatedBy = 0L,
                            Name = "Guarani",
                            Plural = "Guaranis",
                            Symbol = "Gs",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 115L,
                            Code3 = "QAR",
                            CreatedBy = 0L,
                            Name = "Qatari riyal",
                            Plural = "Qatari riyals",
                            Symbol = "﷼",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 116L,
                            Code3 = "RON",
                            CreatedBy = 0L,
                            Name = "New Leu",
                            Plural = "New Lei",
                            Symbol = "lei",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 117L,
                            Code3 = "RSD",
                            CreatedBy = 0L,
                            Name = "Serbian dinar",
                            Plural = "Serbian dinars",
                            Symbol = "Дин.",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 118L,
                            Code3 = "RUB",
                            CreatedBy = 0L,
                            Name = "Russian rouble",
                            Plural = "Russian roubles",
                            Symbol = "руб",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 119L,
                            Code3 = "RWF",
                            CreatedBy = 0L,
                            Name = "Rwanda franc",
                            Plural = "Rwanda francs",
                            Symbol = "R₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 120L,
                            Code3 = "SAR",
                            CreatedBy = 0L,
                            Name = "Saudi riyal",
                            Plural = "Saudi riyals",
                            Symbol = "﷼",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 121L,
                            Code3 = "SBD",
                            CreatedBy = 0L,
                            Name = "Solomon Islands dollar",
                            Plural = "Solomon Islands dollars",
                            Symbol = "SI$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 122L,
                            Code3 = "SCR",
                            CreatedBy = 0L,
                            Name = "Seychelles rupee",
                            Plural = "Seychelles rupees",
                            Symbol = "₨",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 123L,
                            Code3 = "SDG",
                            CreatedBy = 0L,
                            Name = "Sudanese pound",
                            Plural = "Sudanese pounds",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 124L,
                            Code3 = "SEK",
                            CreatedBy = 0L,
                            Name = "Swedish krona",
                            Plural = "Swedish kronur",
                            Symbol = "kr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 125L,
                            Code3 = "SGD",
                            CreatedBy = 0L,
                            Name = "Singapore dollar",
                            Plural = "Singapore dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 126L,
                            Code3 = "SHP",
                            CreatedBy = 0L,
                            Name = "Saint Helena pound",
                            Plural = "Saint Helena pounds",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 127L,
                            Code3 = "SLL",
                            CreatedBy = 0L,
                            Name = "Leone",
                            Plural = "Leones",
                            Symbol = "Le",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 128L,
                            Code3 = "SOS",
                            CreatedBy = 0L,
                            Name = "Somali shilling",
                            Plural = "Somali shillings",
                            Symbol = "S",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 129L,
                            Code3 = "SRD",
                            CreatedBy = 0L,
                            Name = "Surinam dollar",
                            Plural = "Surinam dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 130L,
                            Code3 = "SSP",
                            CreatedBy = 0L,
                            Name = "South Sudanese pound",
                            Plural = "South Sudanese pounds",
                            Symbol = "£",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 131L,
                            Code3 = "STD",
                            CreatedBy = 0L,
                            Name = "Dobra",
                            Plural = "Dobras",
                            Symbol = "Db",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 132L,
                            Code3 = "SVC",
                            CreatedBy = 0L,
                            Name = "El Salvador colon",
                            Plural = "El Salvador colones",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 133L,
                            Code3 = "SYP",
                            CreatedBy = 0L,
                            Name = "Syrian pound",
                            Plural = "Syrian pounds",
                            Symbol = "£S",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 134L,
                            Code3 = "SZL",
                            CreatedBy = 0L,
                            Name = "Lilangeni",
                            Plural = "Emalangeni",
                            Symbol = "E",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 135L,
                            Code3 = "THB",
                            CreatedBy = 0L,
                            Name = "Baht",
                            Plural = "Baht",
                            Symbol = "฿",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 136L,
                            Code3 = "TJS",
                            CreatedBy = 0L,
                            Name = "Somoni",
                            Plural = "Somonis",
                            Symbol = "SM",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 137L,
                            Code3 = "TMM",
                            CreatedBy = 0L,
                            Name = "Manat",
                            Plural = "Manat",
                            Symbol = "m",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 138L,
                            Code3 = "TND",
                            CreatedBy = 0L,
                            Name = "Tunisian dinar",
                            Plural = "Tunisian dinars",
                            Symbol = "TND",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 139L,
                            Code3 = "TOP",
                            CreatedBy = 0L,
                            Name = "Pa'anga",
                            Plural = "Pa'anga",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 140L,
                            Code3 = "TRY",
                            CreatedBy = 0L,
                            Name = "Turkish lira",
                            Plural = "Turkish liras",
                            Symbol = "TL",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 141L,
                            Code3 = "TTD",
                            CreatedBy = 0L,
                            Name = "Trinidad and Tobago dollar",
                            Plural = "Trinidad and Tobago dollars",
                            Symbol = "TT$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 142L,
                            Code3 = "TWD",
                            CreatedBy = 0L,
                            Name = "New Taiwan dollar",
                            Plural = "New Taiwan dollars",
                            Symbol = "NT$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 143L,
                            Code3 = "TZS",
                            CreatedBy = 0L,
                            Name = "Tanzanian shilling",
                            Plural = "Tanzanian shillings",
                            Symbol = "Sh",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 144L,
                            Code3 = "UAH",
                            CreatedBy = 0L,
                            Name = "Hryvnia",
                            Plural = "Hryvni",
                            Symbol = "₴",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 145L,
                            Code3 = "UGX",
                            CreatedBy = 0L,
                            Name = "Ugandan shilling",
                            Plural = "Ugandan shillings",
                            Symbol = "UGX",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 146L,
                            Code3 = "USD",
                            CreatedBy = 0L,
                            Name = "U.S. dollar",
                            Plural = "U.S. dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 147L,
                            Code3 = "UYU",
                            CreatedBy = 0L,
                            Name = "Uruguayo peso",
                            Plural = "Uruguayo pesos",
                            Symbol = "$U",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 148L,
                            Code3 = "UZS",
                            CreatedBy = 0L,
                            Name = "Uzbekistan sum",
                            Plural = "Uzbekistan sum",
                            Symbol = "лв",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 149L,
                            Code3 = "VEF",
                            CreatedBy = 0L,
                            Name = "Bolivar Fuerte",
                            Plural = "Bolivares Fuerte",
                            Symbol = "Bs",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 150L,
                            Code3 = "VND",
                            CreatedBy = 0L,
                            Name = "Dong",
                            Plural = "Dongs",
                            Symbol = "₫",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 151L,
                            Code3 = "VUV",
                            CreatedBy = 0L,
                            Name = "Vatu",
                            Plural = "Vatu",
                            Symbol = "VT",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 152L,
                            Code3 = "WST",
                            CreatedBy = 0L,
                            Name = "Samoan Tala",
                            Plural = "Samoan Talas",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 153L,
                            Code3 = "XAF",
                            CreatedBy = 0L,
                            Name = "CFA Franc - BEAC",
                            Plural = "CFA Francs - BEAC",
                            Symbol = "Fr",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 154L,
                            Code3 = "XCD",
                            CreatedBy = 0L,
                            Name = "Eastern Caribbean dollar",
                            Plural = "Eastern Caribbean dollars",
                            Symbol = "$",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 155L,
                            Code3 = "XOF",
                            CreatedBy = 0L,
                            Name = "CFA franc - BCEAO",
                            Plural = "CFA francs - BCEAO",
                            Symbol = "CFA",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 156L,
                            Code3 = "XPF",
                            CreatedBy = 0L,
                            Name = "Comptoirs Francais du Pacifique Francs",
                            Plural = "Comptoirs Francais du Pacifique Francs",
                            Symbol = "₣",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 157L,
                            Code3 = "YER",
                            CreatedBy = 0L,
                            Name = "Yemeni rial",
                            Plural = "Yemeni rials",
                            Symbol = "﷼",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 158L,
                            Code3 = "ZAR",
                            CreatedBy = 0L,
                            Name = "Rand",
                            Plural = "Rand",
                            Symbol = "R",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 159L,
                            Code3 = "ZMK",
                            CreatedBy = 0L,
                            Name = "Kwacha",
                            Plural = "Kwachas",
                            Symbol = "ZK",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 160L,
                            Code3 = "ZMW",
                            CreatedBy = 0L,
                            Name = "Kwacha",
                            Plural = "Kwachas",
                            Symbol = "ZK",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 161L,
                            Code3 = "ZWD",
                            CreatedBy = 0L,
                            Name = "Zimbabwean dollar",
                            Plural = "Zimbabwean dollars",
                            Symbol = "Z$",
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Core.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("StateOrProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Module.Core.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Code3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NativeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Module.Core.Entities.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Caption")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Module.Core.Entities.StateOrProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("CountryId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId1");

                    b.ToTable("StateOrProvince");
                });

            modelBuilder.Entity("Module.Organizations.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId1");

                    b.HasIndex("CountryId1");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("TypeId1");

                    b.ToTable("Organization");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CurrencyId = 13L,
                            Name = "Default",
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Organizations.Entities.OrganizationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OrganizationType");
                });

            modelBuilder.Entity("Module.Payments.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Module.Payments.Entities.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentProviderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentProviderId");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "bank_payment",
                            CreatedBy = 0L,
                            IsEnable = true,
                            Name = "Bank payment",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Code = "cash",
                            CreatedBy = 0L,
                            IsEnable = true,
                            Name = "Cash",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Code = "cheque",
                            CreatedBy = 0L,
                            IsEnable = true,
                            Name = "Cheque",
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Payments.Entities.PaymentProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PaymentProvider");
                });

            modelBuilder.Entity("Module.Permissions.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Group")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = "accounting.chartofaccount.create",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.update",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.view",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.list",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.delete",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.manage",
                            CreatedBy = 0L,
                            Group = "Chart Of Account",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.create",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.update",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.view",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.list",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.delete",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.chartofaccount.category.manage",
                            CreatedBy = 0L,
                            Group = "Chart Of Account Category",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.create",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.update",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.view",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.list",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.delete",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "accounting.transaction.manage",
                            CreatedBy = 0L,
                            Group = "Transaction",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.create",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.update",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.view",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.list",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.delete",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "core.currency.manage",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.create",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.update",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.view",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.list",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.delete",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "organizations.manage",
                            CreatedBy = 0L,
                            Group = "Organization",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.create",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.update",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.view",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.list",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.delete",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "payments.manage",
                            CreatedBy = 0L,
                            Group = "Payment",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "permissions.create",
                            CreatedBy = 0L,
                            Group = "Permission",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "permissions.update",
                            CreatedBy = 0L,
                            Group = "Permission",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "permissions.view",
                            CreatedBy = 0L,
                            Group = "Permission",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "orgapermissionsnizations.list",
                            CreatedBy = 0L,
                            Group = "Permission",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "permissions.delete",
                            CreatedBy = 0L,
                            Group = "Permission",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.create",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.update",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.view",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.list",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.delete",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.customer.manage",
                            CreatedBy = 0L,
                            Group = "Customer",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.create",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.update",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.view",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.list",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.delete",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.manage",
                            CreatedBy = 0L,
                            Group = "Invoice",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.create",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.update",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.view",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.list",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.delete",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.product.manage",
                            CreatedBy = 0L,
                            Group = "Product",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.create",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.update",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.view",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.list",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.delete",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.invoice.payment.manage",
                            CreatedBy = 0L,
                            Group = "Invoice Payment",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.create",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.update",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.view",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.list",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.delete",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "sales.vendor.manage",
                            CreatedBy = 0L,
                            Group = "Vendor",
                            Name = "Manage",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.create",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "Create",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.update",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "Update",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.view",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "View",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.list",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "List",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.delete",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "Delete",
                            UpdatedBy = 0L
                        },
                        new
                        {
                            Id = "users.manage",
                            CreatedBy = 0L,
                            Group = "User",
                            Name = "Manage",
                            UpdatedBy = 0L
                        });
                });

            modelBuilder.Entity("Module.Sales.Entities.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("PaymentDueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Pinned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Module.Sales.Entities.InvoiceLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("LineItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LineItemId");

                    b.ToTable("InvoiceLineItem");
                });

            modelBuilder.Entity("Module.Sales.Entities.InvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentId");

                    b.ToTable("InvoicePayment");
                });

            modelBuilder.Entity("Module.Sales.Entities.LineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LineItem");
                });

            modelBuilder.Entity("Module.Sales.Entities.LineItemTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("LineItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("TaxId");

                    b.ToTable("LineItemTax");
                });

            modelBuilder.Entity("Module.Sales.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Module.Sales.Entities.OrderLineItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("LineItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LineItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLineItem");
                });

            modelBuilder.Entity("Module.Sales.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCallForPricing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInventory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSale")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Specification")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Module.Sales.Entities.ProductTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTax");
                });

            modelBuilder.Entity("Module.Sales.Entities.Qoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Qoute");
                });

            modelBuilder.Entity("Module.Sales.Entities.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Module.Sales.Entities.Tax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("Module.Sales.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Module.Users.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "administrator",
                            ConcurrencyStamp = "acec435f-c965-478a-bba2-c32ec8a9651d",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "customer",
                            ConcurrencyStamp = "b9d804c1-1032-4e5c-a06c-c97275965887",
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "vendor",
                            ConcurrencyStamp = "4e3c47bb-b168-4da1-8327-f2d07b32be51",
                            Name = "Vendor"
                        });
                });

            modelBuilder.Entity("Module.Users.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Module.Users.Entities.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PermissionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            PermissionId = "accounting.chartofaccount.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 101L,
                            PermissionId = "accounting.chartofaccount.category.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 102L,
                            PermissionId = "accounting.transaction.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 200L,
                            PermissionId = "core.currency.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 300L,
                            PermissionId = "organizations.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 400L,
                            PermissionId = "payments.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 500L,
                            PermissionId = "permissions.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 600L,
                            PermissionId = "sales.customer.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 601L,
                            PermissionId = "sales.invoice.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 602L,
                            PermissionId = "sales.product.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 603L,
                            PermissionId = "sales.invoice.payment.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 604L,
                            PermissionId = "sales.vendor.manage",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 700L,
                            PermissionId = "users.manage",
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Module.Users.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5bf7eed-f135-49b4-a9a0-79934fd61cb6",
                            CreatedBy = 0L,
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMEK4zlmpB7ANy3V5gBLV8UTrLSTyZDx1Ri4KQRuJthXUIQCmpZePOogrBu/orB0TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afb26da4-f076-4609-8f8b-c942f234ec61",
                            TwoFactorEnabled = false,
                            UpdatedBy = 0L,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Module.Users.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Module.Users.Entities.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Module.Users.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            RoleId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Module.Users.Entities.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Module.Accounting.Entities.ChartOfAccount", b =>
                {
                    b.HasOne("Module.Accounting.Entities.ChartOfAccountCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Accounting.Entities.ChartOfAccountType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Accounting.Entities.ChartOfAccountType", b =>
                {
                    b.HasOne("Module.Accounting.Entities.ChartOfAccountCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Accounting.Entities.Transaction", b =>
                {
                    b.HasOne("Module.Accounting.Entities.ChartOfAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Core.Entities.Address", b =>
                {
                    b.HasOne("Module.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Module.Core.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Module.Core.Entities.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Core.Entities.CountryCurrency", b =>
                {
                    b.HasOne("Module.Core.Entities.Country", "Country")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Core.Entities.CountryLanguage", b =>
                {
                    b.HasOne("Module.Core.Entities.Country", "Country")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Core.Entities.District", b =>
                {
                    b.HasOne("Module.Core.Entities.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Core.Entities.StateOrProvince", b =>
                {
                    b.HasOne("Module.Core.Entities.Country", "Country")
                        .WithMany("StatesOrProvinces")
                        .HasForeignKey("CountryId1");
                });

            modelBuilder.Entity("Module.Organizations.Entities.Organization", b =>
                {
                    b.HasOne("Module.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId1");

                    b.HasOne("Module.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId1");

                    b.HasOne("Module.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("Module.Organizations.Entities.OrganizationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId1");
                });

            modelBuilder.Entity("Module.Payments.Entities.Payment", b =>
                {
                    b.HasOne("Module.Payments.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Payments.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Module.Payments.Entities.PaymentProvider", "PaymentProvider")
                        .WithMany()
                        .HasForeignKey("PaymentProviderId");
                });

            modelBuilder.Entity("Module.Sales.Entities.Invoice", b =>
                {
                    b.HasOne("Module.Users.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Module.Sales.Entities.InvoiceLineItem", b =>
                {
                    b.HasOne("Module.Sales.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Sales.Entities.LineItem", "LineItem")
                        .WithMany()
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.InvoicePayment", b =>
                {
                    b.HasOne("Module.Sales.Entities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Payments.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.LineItem", b =>
                {
                    b.HasOne("Module.Sales.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Module.Sales.Entities.LineItemTax", b =>
                {
                    b.HasOne("Module.Sales.Entities.LineItem", "LineItem")
                        .WithMany("LineItemTaxes")
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Sales.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.Order", b =>
                {
                    b.HasOne("Module.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Module.Users.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Module.Sales.Entities.OrderLineItem", b =>
                {
                    b.HasOne("Module.Sales.Entities.LineItem", "LineItem")
                        .WithMany()
                        .HasForeignKey("LineItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Sales.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.ProductTax", b =>
                {
                    b.HasOne("Module.Sales.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Sales.Entities.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.Qoute", b =>
                {
                    b.HasOne("Module.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Users.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Module.Sales.Entities.Stock", b =>
                {
                    b.HasOne("Module.Sales.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Sales.Entities.Warehouse", b =>
                {
                    b.HasOne("Module.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Users.Entities.RolePermission", b =>
                {
                    b.HasOne("Module.Permissions.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("Module.Users.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Module.Users.Entities.User", b =>
                {
                    b.HasOne("Module.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Module.Core.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });
#pragma warning restore 612, 618
        }
    }
}
